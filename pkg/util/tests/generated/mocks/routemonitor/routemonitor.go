// Code generated by MockGen. DO NOT EDIT.
// Source: routemonitor_interface.go

// Package routemonitor is a generated GoMock package.
package routemonitor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	v1alpha1 "github.com/openshift/route-monitor-operator/api/v1alpha1"
	reconcile "github.com/openshift/route-monitor-operator/pkg/util/reconcile"
	reflect "reflect"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockRouteMonitorActionDoer is a mock of RouteMonitorActionDoer interface
type MockRouteMonitorActionDoer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMonitorActionDoerMockRecorder
}

// MockRouteMonitorActionDoerMockRecorder is the mock recorder for MockRouteMonitorActionDoer
type MockRouteMonitorActionDoerMockRecorder struct {
	mock *MockRouteMonitorActionDoer
}

// NewMockRouteMonitorActionDoer creates a new mock instance
func NewMockRouteMonitorActionDoer(ctrl *gomock.Controller) *MockRouteMonitorActionDoer {
	mock := &MockRouteMonitorActionDoer{ctrl: ctrl}
	mock.recorder = &MockRouteMonitorActionDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteMonitorActionDoer) EXPECT() *MockRouteMonitorActionDoerMockRecorder {
	return m.recorder
}

// GetRouteMonitor mocks base method
func (m *MockRouteMonitorActionDoer) GetRouteMonitor(ctx context.Context, req controllerruntime.Request) (v1alpha1.RouteMonitor, reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteMonitor", ctx, req)
	ret0, _ := ret[0].(v1alpha1.RouteMonitor)
	ret1, _ := ret[1].(reconcile.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRouteMonitor indicates an expected call of GetRouteMonitor
func (mr *MockRouteMonitorActionDoerMockRecorder) GetRouteMonitor(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteMonitor", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).GetRouteMonitor), ctx, req)
}

// GetRoute mocks base method
func (m *MockRouteMonitorActionDoer) GetRoute(ctx context.Context, routeMonitor v1alpha1.RouteMonitor) (v1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", ctx, routeMonitor)
	ret0, _ := ret[0].(v1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockRouteMonitorActionDoerMockRecorder) GetRoute(ctx, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).GetRoute), ctx, routeMonitor)
}

// UpdateRouteURL mocks base method
func (m *MockRouteMonitorActionDoer) UpdateRouteURL(ctx context.Context, route v1.Route, routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteURL", ctx, route, routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteURL indicates an expected call of UpdateRouteURL
func (mr *MockRouteMonitorActionDoerMockRecorder) UpdateRouteURL(ctx, route, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteURL", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).UpdateRouteURL), ctx, route, routeMonitor)
}

// CreateBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorActionDoer) CreateBlackBoxExporterResources(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterResources", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterResources indicates an expected call of CreateBlackBoxExporterResources
func (mr *MockRouteMonitorActionDoerMockRecorder) CreateBlackBoxExporterResources(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).CreateBlackBoxExporterResources), ctx)
}

// CreateBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorActionDoer) CreateBlackBoxExporterDeployment(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterDeployment", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterDeployment indicates an expected call of CreateBlackBoxExporterDeployment
func (mr *MockRouteMonitorActionDoerMockRecorder) CreateBlackBoxExporterDeployment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).CreateBlackBoxExporterDeployment), ctx)
}

// CreateBlackBoxExporterService mocks base method
func (m *MockRouteMonitorActionDoer) CreateBlackBoxExporterService(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterService", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterService indicates an expected call of CreateBlackBoxExporterService
func (mr *MockRouteMonitorActionDoerMockRecorder) CreateBlackBoxExporterService(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).CreateBlackBoxExporterService), ctx)
}

// CreateServiceMonitorResource mocks base method
func (m *MockRouteMonitorActionDoer) CreateServiceMonitorResource(ctx context.Context, routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceMonitorResource", ctx, routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceMonitorResource indicates an expected call of CreateServiceMonitorResource
func (mr *MockRouteMonitorActionDoerMockRecorder) CreateServiceMonitorResource(ctx, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).CreateServiceMonitorResource), ctx, routeMonitor)
}

// ShouldDeleteBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorActionDoer) ShouldDeleteBlackBoxExporterResources(ctx context.Context, routeMonitor v1alpha1.RouteMonitor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDeleteBlackBoxExporterResources", ctx, routeMonitor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldDeleteBlackBoxExporterResources indicates an expected call of ShouldDeleteBlackBoxExporterResources
func (mr *MockRouteMonitorActionDoerMockRecorder) ShouldDeleteBlackBoxExporterResources(ctx, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDeleteBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorActionDoer)(nil).ShouldDeleteBlackBoxExporterResources), ctx, routeMonitor)
}

// MockRouteMonitorDeleter is a mock of RouteMonitorDeleter interface
type MockRouteMonitorDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMonitorDeleterMockRecorder
}

// MockRouteMonitorDeleterMockRecorder is the mock recorder for MockRouteMonitorDeleter
type MockRouteMonitorDeleterMockRecorder struct {
	mock *MockRouteMonitorDeleter
}

// NewMockRouteMonitorDeleter creates a new mock instance
func NewMockRouteMonitorDeleter(ctrl *gomock.Controller) *MockRouteMonitorDeleter {
	mock := &MockRouteMonitorDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteMonitorDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteMonitorDeleter) EXPECT() *MockRouteMonitorDeleterMockRecorder {
	return m.recorder
}

// DeleteBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorDeleter) DeleteBlackBoxExporterDeployment(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterDeployment", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterDeployment indicates an expected call of DeleteBlackBoxExporterDeployment
func (mr *MockRouteMonitorDeleterMockRecorder) DeleteBlackBoxExporterDeployment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorDeleter)(nil).DeleteBlackBoxExporterDeployment), ctx)
}

// DeleteBlackBoxExporterService mocks base method
func (m *MockRouteMonitorDeleter) DeleteBlackBoxExporterService(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterService", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterService indicates an expected call of DeleteBlackBoxExporterService
func (mr *MockRouteMonitorDeleterMockRecorder) DeleteBlackBoxExporterService(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorDeleter)(nil).DeleteBlackBoxExporterService), ctx)
}

// DeleteServiceMonitorResource mocks base method
func (m *MockRouteMonitorDeleter) DeleteServiceMonitorResource(ctx context.Context, routeMonitor v1alpha1.RouteMonitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceMonitorResource", ctx, routeMonitor)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceMonitorResource indicates an expected call of DeleteServiceMonitorResource
func (mr *MockRouteMonitorDeleterMockRecorder) DeleteServiceMonitorResource(ctx, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorDeleter)(nil).DeleteServiceMonitorResource), ctx, routeMonitor)
}
